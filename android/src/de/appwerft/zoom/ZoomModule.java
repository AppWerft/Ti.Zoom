/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.zoom;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;

import android.content.Context;
import us.zoom.sdk.MeetingError;
import us.zoom.sdk.MeetingService;
import us.zoom.sdk.MeetingServiceListener;
import us.zoom.sdk.MeetingStatus;
import us.zoom.sdk.ZoomError;
import us.zoom.sdk.ZoomSDK;
import us.zoom.sdk.ZoomSDKAuthenticationListener;
import us.zoom.sdk.ZoomSDKInitializeListener;

@Kroll.module(name = "Zoom", id = "de.appwerft.zoom")
public class ZoomModule extends KrollModule implements MeetingServiceListener,
		ZoomSDKInitializeListener, ZoomSDKAuthenticationListener {

	private static final String LCAT = "Zoom";
	private static final boolean DBG = TiConfig.LOGD;
	private ZoomSDK sdk;
	private boolean mbPendingStartMeeting = false;
	private Context ctx;

	public ZoomModule() {
		super();
		sdk = ZoomSDK.getInstance();
		ctx = TiApplication.getInstance().getApplicationContext();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is
		// created
	}

	// Methods
	@Kroll.method
	public void initialize(KrollDict opts) {
		String appkey;
		String appsecret;
		sdk.initialize(ctx, appkey, appsecret, false, this);
	}

	// Properties
	@Kroll.getProperty
	public String getExampleProp() {
		Log.d(LCAT, "get example property");
		return "hello world";
	}

	@Override
	public void onZoomIdentityExpired() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onZoomSDKLoginResult(long l) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onZoomSDKLogoutResult(long result) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onMeetingStatusChanged(MeetingStatus meetingStatus,
			int errorCode, int internalErrorCode) {

		if (meetingStatus == MeetingStatus.MEETING_STATUS_FAILED
				&& errorCode == MeetingError.MEETING_ERROR_CLIENT_INCOMPATIBLE) {
			// Toast.makeText(this, "Version of ZoomSDK is too low!",
			// Toast.LENGTH_LONG).show();
		}

		if (mbPendingStartMeeting
				&& meetingStatus == MeetingStatus.MEETING_STATUS_IDLE) {
			mbPendingStartMeeting = false;

		}
	}

	private void registerListener() {
		ZoomSDK zoomSDK = ZoomSDK.getInstance();
		zoomSDK.addAuthenticationListener(this);
		MeetingService meetingService = zoomSDK.getMeetingService();
		if (meetingService != null) {
			meetingService.addListener(this);
		}
		testVideoSetting();

	}

	void testVideoSetting() {
		ZoomSDK zoomSDK = ZoomSDK.getInstance();
		zoomSDK.getMeetingSettingsHelper()
				.enableForceAutoStartMyVideoWhenJoinMeeting(false);
		zoomSDK.getMeetingSettingsHelper()
				.enableForceAutoStopMyVideoWhenJoinMeeting(false);
		zoomSDK.getMeetingSettingsHelper()
				.disableAutoShowSelectJoinAudioDlgWhenJoinMeeting(true);
	}

	@Override
	public void onZoomSDKInitializeResult(int errorCode, int internalErrorCode) {
		if (errorCode != ZoomError.ZOOM_ERROR_SUCCESS) {
			// Toast.makeText(this, "Failed to initialize Zoom SDK. Error: " +
			// errorCode + ", internalErrorCode=" + internalErrorCode,
			// Toast.LENGTH_LONG);
		} else {
			// Toast.makeText(this, "Initialize Zoom SDK successfully.",
			// Toast.LENGTH_LONG).show();

			registerMeetingServiceListener();
		}

	}

	private void registerMeetingServiceListener() {
		ZoomSDK zoomSDK = ZoomSDK.getInstance();
		MeetingService meetingService = zoomSDK.getMeetingService();
		if (meetingService != null) {
			meetingService.addListener(this);
		}
	}

}
